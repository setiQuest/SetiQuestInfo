###!/usr/bin/env ruby

require 'rubygems'
require 'nokogiri'
require 'open-uri'

#########################################################
# Class to hold information about the state of one beam.
#########################################################
class Beam
  attr_accessor :number, :datetime, :state, :targetid, :targetname, :ra, :dec, :freqmhz;  

  def initialize(number, datetime, state, targetid, targetname, ra, dec, freqmhz)
    @number = number;
    @datetime = datetime;
    @state = state;
    @targetid = targetid;
    @targetname = targetname;
    @ra = ra;
    @dec = dec;
    @freqmhz  = freqmhz;

    if(@targetid == "")
      @targetid = "undef";
    end
    if(@targetname == "")
      @targetname = "undef";
    end
    if(@ra == "")
      @ra = "0.0";
    end
    if(@dec == "")
      @dec = "0.0";
    end
    if(@freqmhz == "")
      @freqmhz = "0.0";
    end

  end

  def isActive()
    if(@state == "inactive")
      return false;
    end
    return true
  end

  def to_s
    return "Beam[" + @number + "] = " + @state + "," + @datetime + "," + @targetid + "," + @targetname + "," + @ra + "," + @dec + "," +  freqmhz;
  end


  def to_html
    s = "";

    if(isActive())
      s  = "\t<tr>\n";
      s += "\t\t<td align=\"center\">" + @number + "</td>\n";
      s += "\t\t<td align=\"center\">" + @state + "</td>\n";
      s += "\t\t<td align=\"center\">" + @targetid + "</td>\n";
      s += "\t\t<td align=\"center\">" + @targetname + "</td>\n";
      s += "\t<td align=\"center\">" + ('%.04f' % @ra) + "</td>\n";
      s += "\t\t<td align=\"center\">" + ('%.04f' % @dec) + "</td>\n";
      s += "\t<td align=\"center\">" + ('%.06f' % @freqmhz) + "</td>\n";
      s += "\t</tr>\n";
    else
      s  = "\t<tr>\n";
      s += "\t\t<td align=\"center\">" + @number + "</td>\n";
      s += "\t\t<td align=\"center\" colspan=\"1\">" + @state + "</td>\n";
      s += "\t</tr>\n";
    end

    return s;
  end

end

#########################################################
# Class to hold the observation information
#########################################################
class Obs
  attr_accessor :datetime, :activityid, :state, :ra, :dec;

  def initialize(datetime, activityid, state, ra, dec)
    @datetime = datetime;
    @activityid = activityid;
    @state = state;
    @ra = ra;
    @dec = dec;

    if(@activityid == "")
      @activityid = "0";
    end
    if(@ra == "")
      @ra = "0.0";
    end
    if(@dec == "")
      @dec = "0.0";
    end
  end

  def to_s
    return "Obs: " + @datetime + "," + @activityid + "," + @state + "," + @ra + "," + @dec;
  end

  def isActive()
    if(@state.index('Idle') != nil)
      return false;
    end

    return true;
  end

  def to_html

    s = "";

    if(isActive())
      s  = "\t<tr>\n";
      s += "\t\t<td>" + @state + "</td>\n";
      s += "\t\t<td>" + @activityid + "</td>\n";
      s += "\t\t<td>" + ('%.04f' % @ra) + "</td>\n";
      s += "\t\t<td>" + ('%.04f' % @dec) + "</td>\n";
      s += "\t</tr>\n";
    else
      s  = "\t<tr>\n";
      s += "\t\t<td>No observations are running at this time.</td>\n";
      s += "\t</tr>\n";
    end

    return s;
  end

end

# Class to hold info about the observation schedule


####################################################################
# Class to hols info about the start or end info of an obs schedule.
####################################################################

class ObsStartEnd

  attr_accessor :year, :month, :day, :hour, :minute;

  def initialize()
  end

  def to_s
    return @year + "," + @month + "," + @day + "," + @hour + "," + @minute;
  end

  def to_html(prefix, command)

    s  = "\t<tr>\n";
    s += "\t\t<td align=\"right\">" + prefix + "</td>\n";

    if(command == nil)
      s += "\t\t<td>" + @year + "-" + @month + "-" + @day + " " + @hour + ":" + @minute + "</td>\n";
    else
      s += "\t\t<td>" + @year + "-" + @month + "-" + @day + " " + @hour + ":" + @minute + " -- " + command + "</td>\n";
    end

    s += "\t</tr>\n";

    return s;
  end

end

class SchedObs

  attr_accessor :current, :command, :start, :endd;

  ####################
  # Constructor
  ####################
  def initialize(current, command, start, endd)
    @current = current;
    @command = command;
    @start = start;
    @endd = endd;
  end
  
  def to_s
    s = "Obs: current=" + @current + "\n";
    s += "\tCommand: "  + @command + "\n";
    s += "\tStart  : " + @start.to_s + "\n";
    s += "\tEnd    : " + @endd.to_s;
    return s;
  end

  def isObserving
    if(@current == "yes")
      return true;
    end
    return false;
  end

  def getStartTime
    return @start.year + "-" + @start.month + "-" + @start.day + " " + @start.hour + ":" + @start.minute;
  end

  def getEndTime
    return @endd.year + "-" + @endd.month + "-" + @endd.day + " " + @endd.hour + ":" + @endd.minute;
  end

  def to_html()
    s = "";
    if(@current == "yes")
      s += @start.to_html("Started: ", @command);
      s += @endd.to_html("Ends: ", nil);
    else
      s += @start.to_html("Starts: ", @command);
      s += @endd.to_html("Ends: ", nil);
    end
    return s;

  end

end


#########################################################
# Class to hole the schedule information.
#########################################################

class Schedule

  attr_accessor :datetime, :status, :obs;

  ####################
  # Constructor
  ####################
  def initialize(datetime, status)
    @datetime = datetime;
    @status = status;
    @obs = [];
  end

  def addObs(obs)
    @obs << obs;
  end

  ####################
  # Convert to string.
  ####################
  def to_s
    s = @datetime + "," + @status + "\n";
    @obs.each do |ob|
      s += ob.to_s + "\n";
    end
    return s;
  end

  #################
  # Convert to HTML
  #################
  def to_html

    s  = "";
    s  += "<h1>Under development - converting to GMT times, please be patient while debugging takes place.</h1>";
    #s += "<p>Report Created: " + @datetime + "</p>\n"; 
    #s += "<p>Status: " + @status + "</p>\n";

    if(obs == nil || obs[0] == nil)
      s += "<p><b>The schedule is empty</b></p>\n";
      s += "<p><b>Stay tuned for updates!</b></p>\n";
      return s;
    end

    if(obs[0].isObserving == true)
      s += "<p><b>Currently Observing from Schedule</b></p>\n";
      s += "<p><b>Last updated: " + @datetime.gsub("+0000", "") + "</b></p>\n";
      s += "<p>Observation name: " + obs[0].command + "</p>\n";
      s += "<p>This observation ends at <b>" + obs[0].getEndTime + "</b><p>\n";
    else
      s += "<p><b><u>Currently NOT Observing from Schedule</u></b></p>\n";
      s += "<p><b>Last updated: " + @datetime.gsub("+0000", "") + "</b></p>\n";
      s += "<p>Next observation start time is <b>" + obs[0].getStartTime + "</b><p>\n";
    end

    s+= "<p>Observation Schedule:</p>\n";

    s += "<table border=0><tbody>\n";
    @obs.each do |ob|
      s += ob.to_html + "\n";
      s += "<tr><td colspan=\"2\">&nbsp;</td></tr>\n";
    end
    s += "</tbody></table>\n";
    s += "</center>";
    s+= "<br><br><p>NOTES:</p>\n";
    s += "<ul>\n";
    s += "\t<li>All times are GMT.</li>\n";
    s += "\t<li>Times are also displayed in pacific time for the convenience of the ATA operators.</li>\n";
    s += "\t<li>The schedule is subject to frequent changes.</li>\n";
    s += "\t<li>The schedule resampled and put on this server every 5 minutes.</li>\n";
    s += "</ul>\n";
    return s;
    
  end

end

class ObsReport

  #####################################
  # Static method to create the report.
  #####################################
  def self.createReport(sonataStatusFilename, sonataSchedFilename, outputName)

    #status = Nokogiri::HTML(open("/Users/jrichards/seti/temp/sonatastatus.xml"));
    status = Nokogiri::HTML(open(sonataStatusFilename));
  
    beams = []

    status.xpath('//info/beam').each do |node|
      beamnumber = node.attr('beamnumber');
      datetime = node.xpath('datetime').inner_text;
      state = node.xpath('state').inner_text;
      targetid = node.xpath('targetid').inner_text;
      targetname = node.xpath('targetname').inner_text;
      ra = node.xpath('ra').inner_text;
      dec = node.xpath('dec').inner_text;
      freqmhz = node.xpath('freqmhz').inner_text;
  
      beam = Beam.new(beamnumber, datetime, state, targetid, targetname, ra, dec, freqmhz);
      beams << beam;
    end

    # Read in the onservation state
    obs = "";
    status.xpath('//info/obs').each do |node|
      datetime = node.xpath('datetime').inner_text;
      activityid = node.xpath('activityid').inner_text;
      state = node.xpath('state').inner_text;
      ra = node.xpath('primarybeamra').inner_text;
      dec = node.xpath('primarybeamdec').inner_text;

      obs = Obs.new(datetime, activityid, state, ra, dec);
    end

    # Read in the schedule
    schedule = Nokogiri::HTML(open(sonataSchedFilename));
  
    sched = "";
    schedule.xpath('//schedule').each do |schednode|
      datetime = schednode.xpath('datetime').inner_text;
      status = schednode.xpath('status').inner_text;
  
      sched = Schedule.new(datetime, status);
  
      obsnode = schednode.xpath('obs');
  
      obsnode.each do |o|
      
        current = o.attr('current');
        command = o.xpath('command').inner_text;
  
        startnode = o.xpath('start');
        endnode = o.xpath('end');
  
        obsstart = ObsStartEnd.new;
        obsend = ObsStartEnd.new;
  
        startnode.each do |ose|
          obsstart.year = ose.xpath('year').inner_text;
          obsstart.month = ose.xpath('month').inner_text;
          obsstart.day = ose.xpath('day').inner_text;
          obsstart.hour = ose.xpath('hour').inner_text;
          obsstart.minute = ose.xpath('minute').inner_text;
        end
      
        endnode.each do |ose|
          obsend.year = ose.xpath('year').inner_text;
          obsend.month = ose.xpath('month').inner_text;
          obsend.day = ose.xpath('day').inner_text;
          obsend.hour = ose.xpath('hour').inner_text;
          obsend.minute = ose.xpath('minute').inner_text;
        end
  
        so = SchedObs.new(current, command, obsstart, obsend);
        sched.addObs(so);

      end

    end


    # Print out for debug
    #beams.each do |beam|
    #  puts beam.to_s + "," + beam.isActive().to_s +  "\n";
    #end
    #puts obs.to_s + "\n";
    #puts sched.to_s + "\n";

    anyActiveBeams = false;
    beams.each do |beam|
      if(beam.isActive == true)
        anyActiveBeams = true;
      end 
    end

      # Create and return the report
      s = "";
      s += "<h1>ATA Observation Status And Schedule</h1>\n";

      s += "<center><img src=\"http://setiquest.info/images/ata-july-09-2011.jpg\" width=\"500\"/></center>\n";
      s += "<center>";

      s += "<p><b><u>Observation Status</u></b></p>\n";
      s += "<center><p><b>Updated: " + obs.datetime.gsub("+0000", "") + "</b></p></center>\n";
      if(obs.isActive == true)
        s += "<table><tbody>\n";
        s += "\t<tr>\n";
        if(obs.state.index('eplay') != nil)
          s += "<td align=right>State:</td><td align=left><font color=\"red\">" + obs.state + "</font></td>\n";
        else
          s += "<td align=right>State:</td><td align=left>" + obs.state + "</td>\n";
        end
        s += "\t</tr>\n";
        s += "\t<tr>\n";
        s += "<td align=right>ActivityId:</td><td align=left>" + obs.activityid + "</td>\n";
        s += "\t</tr>\n";
        s += "\t<tr>\n";
        s += "<td align=right>RA:</td><td align=left>" + ('%.04f' % obs.ra) + "</td>\n";
        s += "\t</tr>\n";
        s += "\t<tr>\n";
        s += "<td align=right>DEC:</td><td align=left>" + ('%.04f' % obs.dec) + "</td>\n";
        s += "\t</tr>\n";
        s += "</tbody></table>\n";
      else
        s += "<table><tbody>\n";
        s += "\t<tr>\n";
        s += "<td align=right>State:</td><td align=left>" + obs.state + "</td>\n";
        s += "\t</tr>\n";
        s += "</tbody></table>\n";
      end

      s += "<p><b><u>Beam Status</u></b></p>\n";

      if(anyActiveBeams == true)
        s += "<table><tbody>\n";
        s += "<tr>\n";
        s += "\t<th align=\"center\">beam#</th>\n";
        s += "\t<th align=\"center\">state</th>\n";
        s += "\t<th align=\"center\">Target ID</th>\n";
        s += "\t<th align=\"center\">Target Names</th>\n";
        s += "\t<th align=\"center\">RA</th>\n";
        s += "\t<th align=\"center\">DEC</th>\n";
        s += "\t<th align=\"center\">Freq (MHz)</th>\n";
        s += "</tr>\n";
      else
        s += "<table><tbody>\n";
        s += "<tr>\n";
        s += "\t<th align=\"center\">beam#</th>\n";
        s += "\t<th align=\"center\">&nbsp;&nbsp;&nbsp;state&nbsp;&nbsp;&nbsp;</th>\n";
        s += "</tr>\n";
      end

      beams.each do |beam|
        s += beam.to_html;
      end
      s += "</tbody></table>\n";

      s += "<hr>\n";
  
      #s += "<p>Report Created: " + @datetime + "</p>\n"; 
      s += sched.to_html + "\n";
  
      #outputName
      File.open(outputName, 'w') {|f| f.write(s) } ;
      return s;
  end

end

#puts ObsReport.createReport("../../public/feeds/sonatastatus.xml",
#                            "../../public/feeds/sonataschedule.xml",
#                            "../../public/obsinfo.html") ;
